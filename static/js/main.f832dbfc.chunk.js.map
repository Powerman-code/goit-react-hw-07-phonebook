{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","App.module.css","components/ContactList/ContactList.module.css","redux/phoneBook/phoneBook-actions.js","redux/phoneBook/phoneBook-reducer.js","redux/store.js","redux/phoneBook/phoneBook-operations.js","redux/phoneBook/phoneBook-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","name","number","payload","id","uuidv4","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactsRequest","fetchContactsError","fetchContactsSuccess","changeFilter","items","createReducer","_","state","filter","loading","error","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","phoneBook","phoneBookReducer","devTools","process","axios","defaults","baseURL","getContacts","getFilter","getVisibleContacts","createSelector","contacts","normalizedFilter","toLowerCase","includes","getLoadingStatus","getErrorMessage","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","onAddContact","a","contact","console","log","post","then","data","phoneBookOperations","validateData","msg","find","alert","handleNameChange","evt","target","value","reset","onSubmit","e","preventDefault","className","s","form","label","input","type","placeholder","onChange","button","Filter","phoneBookActions","ContactList","visibleContacts","loadingStatus","onDeleteContact","delete","useEffect","get","map","onClick","App","container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f832dbfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3ax8P\",\"label\":\"ContactForm_label__3twa6\",\"input\":\"ContactForm_input__3hg09\",\"button\":\"ContactForm_button__2S2Av\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Filter_button__Cl75d\",\"input\":\"Filter_input__13Hvf\",\"label\":\"Filter_label__3WdbA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2J1e5\",\"App-logo\":\"App_App-logo__2V-rn\",\"App-header\":\"App_App-header__FMXJh\",\"App-link\":\"App_App-link__LeNhy\",\"container\":\"App_container__27EMI\",\"App-logo-spin\":\"App_App-logo-spin__FjVE2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__3Ot6y\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContactRequest = createAction('phoneBook/AddRequest');\n\nexport const addContactSuccess = createAction(\n  'phoneBook/AddSuccess',\n  ({ name, number }) => ({\n    payload: {\n      id: uuidv4(),\n      name,\n      number,\n    },\n  }),\n);\n\nexport const addContactError = createAction('phoneBook/AddError');\n\nexport const deleteContactRequest = createAction('phoneBook/DeleteRequest');\nexport const deleteContactSuccess = createAction('phoneBook/DeleteSuccess');\nexport const deleteContactError = createAction('phoneBook/DeleteError');\n\nexport const fetchContactsRequest = createAction(\n  'phoneBook/fetchContactsRequest',\n);\n\nexport const fetchContactsError = createAction('phoneBook/fetchContactsError');\n\nexport const fetchContactsSuccess = createAction(\n  'phoneBook/fetchContactsSuccess',\n);\n\nexport const changeFilter = createAction('phoneBook/ChangeFilter');\n\n// old redux\n\n// import { v4 as uuidv4 } from 'uuid';\n// import types from './phoneBook-types';\n\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// console.log(addContact.payload);\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n// export default { addContact, deleteContact, changeFilter };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from '../phoneBook/phoneBook-actions';\n// import { fetchContacts } from './phoneBook-operations';\n\nconst items = createReducer([], {\n  // [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, { payload }) => payload,\n  [fetchContactsRequest]: () => null,\n  [addContactError]: (_, { payload }) => payload,\n  [deleteContactError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  error,\n  loading,\n});\n\n// old redux\n\n// import { combineReducers } from 'redux';\n// import types from './phoneBook-types';\n\n// const defaultItems = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\n// const items = (state = defaultItems, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       console.log(payload);\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  // combineReducers,\n} from '@reduxjs/toolkit';\nimport phoneBookReducer from './phoneBook/phoneBook-reducer';\nimport logger from 'redux-logger';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    phoneBook: phoneBookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","// import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from '../phoneBook/phoneBook-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = () => async dispatch => {\n  try {\n    dispatch(fetchContactsRequest());\n\n    await axios\n      .get('/contacts')\n      // console.log(response);\n      .then(({ data }) => dispatch(fetchContactsSuccess(data)));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n  console.log(name, number);\n  try {\n    dispatch(addContactRequest());\n\n    await axios\n      .post('/contacts', contact)\n      // console.log(response);\n      .then(({ data }) => dispatch(addContactSuccess(data)));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n// обычный фетч\n// export const addContact = (name, number) => dispatch => {\n//   const contact = {\n//     name,\n//     number,\n//   };\n\n//   dispatch(addContactRequest());\n\n//   axios\n//     .post('/contacts', contact)\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\n//     .catch(error => dispatch(addContactError(error)));\n// };\n\nexport const deleteContact = id => async dispatch => {\n  try {\n    dispatch(deleteContactRequest());\n\n    await axios\n      .delete(`/contacts/${id}`)\n      // console.log(response);\n      .then(() => dispatch(deleteContactSuccess(id)));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n","import { createSelector } from 'reselect';\nexport const getContacts = state => state.phoneBook.items;\nexport const getFilter = state => state.phoneBook.filter;\n\n// export const getVisibleContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n//   console.log(filter, contacts);\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// мемоизиров. ф-я\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport const getLoadingStatus = state => state.phoneBook.loading;\n\nexport const getErrorMessage = state => state.phoneBook.error;\n","import PropTypes from 'prop-types';\nimport { Component, useState } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport * as phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport * as phoneBookOperations from '../../redux/phoneBook/phoneBook-operations';\nimport { getContacts } from '../../redux/phoneBook/phoneBook-selectors';\n\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  // console.log(contacts);\n  const dispatch = useDispatch();\n  const onAddContact = (name, number) =>\n    dispatch(phoneBookOperations.addContact(name, number));\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    validateData();\n    reset();\n  };\n\n  const validateData = () => {\n    const normalizedFilter = name.toLowerCase();\n    const msg = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedFilter,\n    );\n\n    if (!name || !number) {\n      alert('Введите правильное имя и телефон');\n      return;\n    }\n\n    if (msg) {\n      alert('Taкое имя уже есть');\n      return;\n    } else {\n      onAddContact(name, number);\n    }\n  };\n\n  const handleNameChange = evt => {\n    const { value, name } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter contact name\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter contact number\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = evt => {\n//     evt.preventDefault();\n//     console.log(this.state);\n//     console.log(evt);\n//     this.validateData();\n//     this.reset();\n//   };\n\n//   validateData = () => {\n//     const { name, number } = this.state;\n//     const { contacts } = this.props;\n\n//     const normalizedFilter = name.toLowerCase();\n//     const msg = contacts.find(\n//       contact => contact.name.toLowerCase() === normalizedFilter,\n//     );\n//     console.log(msg);\n\n//     if (!name || !number) {\n//       alert('Введите правильное имя и телефон');\n//       return;\n//     }\n\n//     if (msg) {\n//       alert('Taкое имя уже есть');\n//       return;\n//     } else {\n//       this.props.onAddContact(this.state);\n//       // console.log(this.props.contacts);\n//     }\n//   };\n\n//   handleNameChange = evt => {\n//     const { name, value } = evt.target;\n//     this.setState({\n//       [name]: value,\n//     });\n//     // console.log(name);\n//     // console.log(value);\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             placeholder=\"Enter contact name\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={s.label}>\n//           Number\n//           <input\n//             className={s.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             placeholder=\"Enter contact number\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   contacts: state.phoneBook.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onAddContact: data => dispatch(phoneBookActions.addContact(data)),\n// });\n\n// ContactForm.propTypes = {\n//   onAddContact: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n// OldRedux\n\n// import PropTypes from 'prop-types';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\n\n// import s from './ContactForm.module.css';\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = evt => {\n//     evt.preventDefault();\n//     console.log(this.state);\n//     console.log(evt);\n//     this.validateData();\n//     this.reset();\n//   };\n\n//   validateData = () => {\n//     const { name, number } = this.state;\n//     const { contacts } = this.props;\n\n//     const normalizedFilter = name.toLowerCase();\n//     const msg = contacts.find(\n//       contact => contact.name.toLowerCase() === normalizedFilter,\n//     );\n//     console.log(msg);\n\n//     if (!name || !number) {\n//       alert('Введите правильное имя и телефон');\n//       return;\n//     }\n\n//     if (msg) {\n//       alert('Taкое имя уже есть');\n//       return;\n//     } else {\n//       this.props.onAddContact(this.state);\n//       // console.log(this.props.contacts);\n//     }\n//   };\n\n//   handleNameChange = evt => {\n//     const { name, value } = evt.target;\n//     this.setState({\n//       [name]: value,\n//     });\n//     // console.log(name);\n//     // console.log(value);\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             placeholder=\"Enter contact name\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={s.label}>\n//           Number\n//           <input\n//             className={s.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             placeholder=\"Enter contact number\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   contacts: state.phoneBook.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onAddContact: data => dispatch(phoneBookActions.addContact(data)),\n// });\n\n// ContactForm.propTypes = {\n//   onAddContact: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { connect, useSelector, useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport * as phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport s from './Filter.module.css';\nimport { getFilter } from '../../redux/phoneBook/phoneBook-selectors';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  // const onChange = e => dispatch(phoneBookActions.changeFilter(e.target.value));\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"string\"\n        name=\"filter\"\n        placeholder=\"Enter contact name to find\"\n        value={value}\n        onChange={e => dispatch(phoneBookActions.changeFilter(e.target.value))}\n        // onChange={onChange}\n      ></input>\n    </label>\n  );\n}\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// OldRedux\n\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n// import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\n// import s from './Filter.module.css';\n\n// function Filter({ value, onChange }) {\n//   return (\n//     <label className={s.label}>\n//       Find contacts by name\n//       <input\n//         className={s.input}\n//         type=\"string\"\n//         name=\"filter\"\n//         placeholder=\"Enter contact name to find\"\n//         value={value}\n//         onChange={onChange}\n//       ></input>\n//     </label>\n//   );\n// }\n\n// const mapStateToProps = state => ({\n//   value: state.phoneBook.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => {\n//     console.log(e.target.value);\n//     return dispatch(phoneBookActions.changeFilter(e.target.value));\n//   },\n// });\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { connect, useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport s from './ContactList.module.css';\nimport {\n  getLoadingStatus,\n  // getContacts,\n  // getFilter,\n  getVisibleContacts,\n  getErrorMessage,\n} from '../../redux/phoneBook/phoneBook-selectors';\nimport * as phoneBookOperations from '../../redux/phoneBook/phoneBook-operations';\nimport { useEffect } from 'react';\n\n// const getVisibleContacts = (contacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   console.log(filter);\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\nexport default function ContactList() {\n  const visibleContacts = useSelector(getVisibleContacts);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const error = useSelector(getErrorMessage);\n  // const contacts = useSelector(state => state.phoneBook.items);\n  // const filter = useSelector(state => state.phoneBook.filter);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(phoneBookOperations.deleteContact(id));\n\n  // const visibleContacts = getVisibleContacts(contacts, filter);\n\n  useEffect(() => {\n    dispatch(phoneBookOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {error && <h1>Error</h1>}\n      {loadingStatus && <h1>Loading, please wait</h1>}\n      <ul>\n        {visibleContacts &&\n          visibleContacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <p>\n                {name} {number}\n              </p>\n              <button\n                type=\"button\"\n                id={id}\n                onClick={() => onDeleteContact(id)}\n                className={s.button}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n}\n\n// OldRedux\n\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n// import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\n// import s from './ContactList.module.css';\n\n// function ContactList({ onDeleteContact, contacts }) {\n//   // const filteredContacts = visibleContacts;\n//   return (\n//     <ul>\n//       {contacts &&\n//         contacts.map(({ id, name, number }) => (\n//           <li key={id}>\n//             <p>\n//               {name} {number}\n//             </p>\n//             <button\n//               type=\"button\"\n//               id={id}\n//               onClick={() => onDeleteContact(id)}\n//               className={s.button}\n//             >\n//               Delete\n//             </button>\n//           </li>\n//         ))}\n//     </ul>\n//   );\n// }\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   console.log(filter);\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = state => {\n//   const { filter, items } = state.phoneBook;\n//   const visibleContacts = getVisibleContacts(items, filter);\n//   // items.filter(item => item.name.toLowerCase().includes(normalizedFilter));\n\n//   return {\n//     // contacts: state.phoneBook.items,\n//     contacts: visibleContacts,\n//   };\n// };\n\n// // Упрощенный вариант\n// // const mapStateToProps = ({ phoneBook: { items, filter } }) => ({\n// //   contacts: getVisibleContacts(items, filter),\n// // });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(phoneBookActions.deleteContact(id)),\n// });\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from 'react';\n\nimport s from './App.module.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nexport default function App() {\n  return (\n    <div className={s.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\n// OldRedux\n// import { Component } from 'react';\n\n// import s from './App.module.css';\n// import ContactForm from './components/ContactForm/ContactForm';\n// import Filter from './components/Filter/Filter';\n// import ContactList from './components/ContactList/ContactList';\n\n// export default class App extends Component {\n//   // state = {\n//   //   contacts: [\n//   //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//   //   ],\n//   //   filter: '',\n//   // };\n\n//   // componentDidMount() {\n//   //   console.log('Component did mount');\n//   //   const contacts = localStorage.getItem('contacts');\n//   //   const parsedContacts = JSON.parse(contacts);\n//   //   console.log(contacts);\n//   //   console.log(parsedContacts);\n//   //   if (parsedContacts) {\n//   //     this.setState({ contacts: parsedContacts });\n//   //   }\n//   // }\n\n//   // componentDidUpdate(prevProps, prevState) {\n//   //   console.log('Component did update');\n//   //   if (this.state.contacts !== prevState.contact) {\n//   //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//   //   }\n//   // }\n\n//   // onAddContact = ({ name, number }) => {\n//   //   const { contacts } = this.state;\n//   //   this.setState(prevState => {\n//   //     return {\n//   //       contacts: [...prevState.contacts, { id: uuidv4(), name, number }],\n//   //     };\n//   //   });\n//   //   console.log(contacts);\n//   // };\n\n//   // onFilter = evt => {\n//   //   const { name, value } = evt.target;\n//   //   this.setState({\n//   //     [name]: value,\n//   //   });\n//   //   console.log(this.state.filter);\n//   // };\n\n//   // getVisibleContacts = () => {\n//   //   const { filter, contacts } = this.state;\n\n//   //   const normalizedFilter = filter.toLowerCase();\n\n//   //   return contacts.filter(contact =>\n//   //     contact.name.toLowerCase().includes(normalizedFilter),\n//   //   );\n//   // };\n\n//   // deleteContact = evt => {\n//   //   console.log(evt.target.id);\n//   //   this.setState(prevState => ({\n//   //     contacts: prevState.contacts.filter(\n//   //       contact => contact.id !== evt.target.id,\n//   //     ),\n//   //   }));\n//   // };\n\n//   render() {\n//     // const { filter, contacts } = this.state;\n//     // const filteredContacts = this.getVisibleContacts();\n//     // console.log(filteredContacts);\n//     return (\n//       <div className={s.container}>\n//         <h1>Phonebook</h1>\n//         <ContactForm\n//         // contacts={contacts} onAddContact={this.onAddContact}\n//         />\n//         <h2>Contacts</h2>\n//         <Filter\n//         // value={filter} onChange={this.onFilter}\n//         />\n//         <ContactList\n//         // onDeleteContact={this.deleteContact}\n//         // onGetVisibleContacts={this.getVisibleContacts}\n//         />\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}